
description = """
A simplified standalone ETL engine for groovy.  Gratum is groovy + datum.
"""

allprojects {
    apply plugin: "groovy"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.github.chubbard'
//version = '1.1.6'
    version = '1.2.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation('org.codehaus.groovy:groovy-all:2.5.18') {
            exclude group: 'org.codehaus.groovy', module:'groovy-swing'
            exclude group: 'org.codehaus.groovy', module:'groovy-testng'
            exclude group: 'org.codehaus.groovy', module:'groovy-console'
            exclude group: 'org.codehaus.groovy', module:'groovy-docgenerator'
            exclude group: 'org.codehaus.groovy', module:'groovy-ant'
//        exclude group: 'org.codehaus.groovy', module:'groovy-groovydoc'
            exclude group: 'org.codehaus.groovy', module:'groovy-groovysh'
        }

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'

    }
    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    task groovydocJar(type: Jar, dependsOn: groovydoc ) {
        classifier 'groovydoc'
        from groovydoc.destinationDir
    }

    artifacts {
        archives jar
        archives javadocJar
        archives groovydocJar
        archives sourceJar
    }

    signing {
//    //sign publishing.publications.maven
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    publishing {
        publications {
            gratum(MavenPublication) {
                from components.java
                artifact sourceJar
                artifact groovydocJar
                artifact javadocJar

                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/chubbard/gratum'
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "chubbard"
                            name = "Charlie Hubbard"
                            email = "gratum@fuseanalytics.com"
                        }
                    }
                    scm {
                        connection = "scm:https://github.com/chubbard/gratum.git"
                        developerConnection = "scm:https://github.com/chubbard/gratum.git"
                        url = "https://github.com/chubbard/gratum.git"
                    }
                }

                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        println( it.file.name )
                        def matcher = it.file =~ /-(sources|javadoc|groovydoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }

        repositories {
            maven {
                url project.version.endsWith('-SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username System.getenv("sonatypeUsername") ?: sonatypeUsername
                    password System.getenv("sonatypePassword") ?: sonatypePassword
                }
            }
            mavenLocal()
        }
    }

    model {
        tasks.generatePomFileForGratumPublication {
            destination = file("$buildDir/generated-pom.xml")
        }

        tasks.publishGratumPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishGratumPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}

tasks.named('wrapper') {
    gradleVersion = '5.6.4'
}
