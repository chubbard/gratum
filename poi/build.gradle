
dependencies {
//    implementation 'org.apache.poi:poi:5.2.2'
//    implementation 'org.apache.poi:poi-ooxml:5.2.2'
//    implementation 'org.apache.poi:poi-ooxml-lite:5.2.2'
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.apache.poi:ooxml-schemas:1.4'
    implementation project(':core')
}

description = """
Adds support for reading and write MS Excel documents.
"""

publishing {
    publications {
        gratumPoi(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact groovydocJar
            artifact javadocJar

            pom {
                name = "gratum-${project.name}"
                description = project.description
                url = 'https://github.com/chubbard/gratum'
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "chubbard"
                        name = "Charlie Hubbard"
                        email = "gratum@fuseanalytics.com"
                    }
                }
                scm {
                    connection = "scm:https://github.com/chubbard/gratum.git"
                    developerConnection = "scm:https://github.com/chubbard/gratum.git"
                    url = "https://github.com/chubbard/gratum.git"
                }
            }

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    println( it.file.name )
                    def matcher = it.file =~ /-(sources|javadoc|groovydoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }

    model {
        tasks.generatePomFileForGratumPoiPublication {
            destination = file("$buildDir/generated-pom.xml")
        }

        tasks.publishGratumPoiPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishGratumPoiPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}